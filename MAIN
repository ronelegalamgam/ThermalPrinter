#include <SoftwareSerial.h>
#include <StringTokenizer.h>

const byte rxPin      = 10;
const byte txPin      = 11;
const int  timeout    = 1000;
String store          = "Nanays";
String school         = "DLSUD";
String date_and_time  = "";
SoftwareSerial Thermal(rxPin, txPin);

void setup() 
{
 Serial.begin(19200);   
 Serial.setTimeout(timeout);
 Thermal.begin(9600);               
 Thermal.setTimeout(timeout);
 initPrinter();
}

void initPrinter()
{
 //initialize printer
 Thermal.write(27);
 Thermal.write(64);
 delay(200);
 //charset2
 Thermal.write(27);
 Thermal.write(54);
 delay(200);
 //font
 Thermal.write(27);
 Thermal.write(87);
 Thermal.write(2);
 delay(200);
 //st gray degree
 Thermal.write(27);
 Thermal.write(109);
 Thermal.write(2);
}

void loop()
{
   if(Serial.available() > 0){
      String str_to_parse = Serial.readString();
      StringTokenizer check_print(str_to_parse, "|");
      String type_of_print = check_print.nextToken();
      if(type_of_print == "H"){
        print_history(str_to_parse);
      }else{
        print_individual(str_to_parse);
      }
   }//end if(serial.available())
}//end void loop();


//CLEAR BUFFER
void clear_buffer(){
  for(int i=0; i<10; i++){
    while(Serial.available() > 0){
      char t = Serial.read();
    }
    delay(10);
  }
}

//PRINTER FUNCTIONS
void thermal_print(String s){
  Thermal.print(s);
  Thermal.write(13);
}

void thermal_space(){
  Thermal.println("");
}

void thermal_linefeed(){
  for(int i=0; i<25; i++){
   Thermal.write(10);
   delay(80);
  } 
}

void parse_spaces(String s,int spaces){
  StringTokenizer number_of_words(s," ");
  int num_of_print = spaces;
  String array_of_words[num_of_print];
  while(number_of_words.hasNext()){
    String get_name = number_of_words.nextToken();
    get_name.trim();
    array_of_words[spaces-1] = get_name;
    spaces--;
  }
  for(int i=0; i<num_of_print;i++){
      thermal_print(array_of_words[i]);
  }
}

//PRINT TYPES
void print_history(String s){
  StringTokenizer history(s,"|");
  String summary          = "Summary";
  String total_sales      = "Total Sales:";
  String total_amount     = "";
  int counter             = 0;
  int i                   = 0;
  int num_of_spaces = 0;
  while(history.hasNext()){
    if(i==0){
      history.nextToken();
    }
    if(i==1){
      date_and_time = history.nextToken();
    }
    if(i==2){
      total_amount =  history.nextToken();
    }
    if(i==3){
      String food     = "";
      String sold     = "";
      while(history.hasNext()){
        String subtotal = "";
        if(counter == 0){
          food = history.nextToken();
          StringTokenizer count_number_of_spaces(food," ");
          while(count_number_of_spaces.hasNext()){
            count_number_of_spaces.nextToken();
            num_of_spaces++;
          }
        }
        if(counter == 1){
          sold = "Sold:" + history.nextToken();
        }
        if(counter == 2){
          subtotal = "Total:"+ history.nextToken(); 
          thermal_space();
          thermal_print(subtotal);
          thermal_print(sold);   
        }
        if(counter == 3){
          parse_spaces(food,num_of_spaces);
          counter = -1;
        }
        counter++;
      }
      break;
   }
    i++;
  }
  thermal_space();
  thermal_print(total_amount);
  thermal_print(total_sales);
  thermal_print(date_and_time);
  thermal_print(summary);
  thermal_print(store);
  thermal_linefeed();
  clear_buffer();
}//end print_history

void print_individual(String s){
      int    i=0;
      String customer            = "Customer: ";
      String tendered            = "Tendered: ";
      String orderid             = "Order ID: ";
      String location             = "Place: ";
      String signature           = "Signature:";
      String firstname           = "";
      String lastname            = "";
      StringTokenizer data_sent(s, "|");
      thermal_print(signature);
      while (data_sent.hasNext()){
          if(i == 0){
            firstname = data_sent.nextToken();
          }
          if(i == 1){
            lastname = data_sent.nextToken();
          }
          if(i == 2) {
            tendered += data_sent.nextToken();
            thermal_print(tendered);
          }
          if(i == 3) {
            date_and_time = data_sent.nextToken();
          }
          if(i == 4) {
            orderid += data_sent.nextToken();
          }
          if(i == 5){
            location += data_sent.nextToken();
          }
          if(i == 6){
            String qty_name_st      = "";
            String food_to_parse    = "";
            int    counter          = 0;
            while(data_sent.hasNext()){
              if(counter == 0){
                qty_name_st = "Total: " + data_sent.nextToken();
                thermal_space();
                thermal_print(qty_name_st);
              }
              if(counter == 1){
                qty_name_st = "Price: " + data_sent.nextToken();
                thermal_print(qty_name_st);
              }
              if(counter == 2){
                qty_name_st = "Qty: " + data_sent.nextToken();
                thermal_print(qty_name_st);
                qty_name_st="";
              }
              if(counter == 3){
                 food_to_parse  = data_sent.nextToken();
                 StringTokenizer count_number_of_spaces(food_to_parse," ");
                 int num_of_spaces = 0;
                 while(count_number_of_spaces.hasNext()){
                    count_number_of_spaces.nextToken();
                    num_of_spaces++;
                 }
                 parse_spaces(food_to_parse,num_of_spaces);
                 counter=-1;
              }
              counter++;
            }//end while
            break;
          }//end if(i==6)
          i++;
      }//end while
      thermal_space();
      thermal_print(location);
      thermal_print(lastname);
      thermal_print(firstname);
      thermal_print(customer);
      thermal_space();
      thermal_print(orderid);
      thermal_print(date_and_time);
      thermal_print(store);
      thermal_print(school);
      thermal_linefeed();
      clear_buffer();
}
